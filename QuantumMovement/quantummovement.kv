#:import Factory kivy.factory.Factory

<ClassicalParticle>:
    size: 25, 25
    canvas:
        Ellipse:
            pos: self.pos
            size: self.size

<DataInput>:
    multiline: False

<FunctionInput>:
    #multiline: False

<TextPopup>:
    title: ""
    auto_dismiss: True
    size_hint: 0.4, 0.2

<BoolCheckBox>:
    size_hint: None, None
    color: [0., 1., 0., 1.]  # Blue Checkmark
    size: 35, 35

<PlotPopup>:
    title: ""
    auto_dismiss: True
    size_hint:  0.5, 0.5
    BoxLayout:
        id: plot
        padding:20

<SavedStatesPopup>:
    auto_dismiss: True
    title: "Estats guardats"
    size_hint: 0.75, 0.75
    ScrollView:
        #do_scroll_x: False
        #do_scroll_y: True
        GridLayout:
            cols: 5
            size_hint_y: None
            height: self.minimum_height
            spacing: 10
            #row_force_default: True
            row_default_height: 100
            id: states

<GlobalVariable>:
    #size_hint: 1, 1

<GlobalVariablesPopup>:
    auto_dismiss: True
    size_hint_x: 0.8
    size_hint_y: 0.8
    title: "Paràmetres/Variables : Nom - Valor"

<ColoredLabel>:
    canvas.before:
        Color:
            rgba: 0.8, 0.8, 0.8, 0.5
        Rectangle:
            size: self.size
            pos: self.pos
        #Line:
        #    width: 2
        #    rectangle: self.x, self.y, self.width, self.height

<SaveGifPopup>:
    duration: 5.
    fileName: "resultat"
    animwidth: 12.
    animheight: 7.
    auto_dismiss: True
    size_hint_x: 0.5
    size_hint_y: 0.5
    title: "Guarda video"

    BoxLayout:
        padding: 20
        spacing: 10
        orientation: "vertical"

        ColoredLabel:
            text: "Es guardarà una animació de l'evolució\n a partir del moment actual"
        BoxLayout:
            orientation:"horizontal"
            Label:
                text: "Duració real:\n(segons)"
            DataInput:
                holder: root
                attribute: "duration"
                condition: "positive"
                id: duration
            Label:
                text: "Nom output:"
            DataInput:
                holder: root
                attribute: "fileName"
                condition: "notNothing"
                id: fileName
        GridLayout:
            cols: 2
            rows: 2
            Label:
                text: "Amplada (in):"
            DataInput:
                holder: root
                attribute: "animwidth"
                condition: "range-1-15"
            Label:
                text: "Alçada (in):"
            DataInput:
                holder: root
                attribute: "animheight"
                condition: "range-1-15"

        GridLayout:
            cols:3
            Button:
                text:"Crea .gif"
                on_release:
                    root.saveAnimation(root.fileName, root.duration, "gif")
                    root.dismiss()
            Button:
                text:"Crea .mp4"
                on_release:
                    root.saveAnimation(root.fileName, root.duration, "mp4")
                    root.dismiss()
            Button:
                text:"Tira enrere"
                on_release:
                    root.dismiss()

<ParametersPopup>:
# PROBLEM WITH POPUPS: Data gets reset after opening and closing?
    auto_dismiss: True
    size_hint_y: 0.9
    size_hint_x: 0.9
    title: "Configuració"#: ENTER per efectuar canvis"

    BoxLayout:
        orientation: "vertical"
        spacing: 5
        size: self.parent.width, self.parent.height

        GridLayout:
            size_hint_y: None
            height: 150
            cols:2
            Label:
                size_hint_x:0.7
                text: "Funcions poden dependre de x, y, t. Es pot fer servir radi r\nEs poden incloure var. glob amb {nomVar}\nEs poden fer ifs amb heavyside(x, valor_a_x0), suaus amb hssuau(x,k)"
            Button:
                size_hint_x:0.3
                text: "Variables\nGlobals"
                on_release:
                    Factory.GlobalVariablesPopup(root.window).open()

        GridLayout:
            cols: 2

            GridLayout:
                size_hint_x: None
                width: 200
                rows: 3
                Label:
                    text: "Potencial:"
                Button:
                    text: "Aplica canvi"
                    on_release:
                        root.ids.potential.on_text_validate()
                        root.window.QSystem.potential = root.window.potential
                        root.window.animation.reset_plot()
                Button:
                    text: "Previsualitza"
                    on_release:
                        copy = root.window.potential
                        copyDef = root.window.potentialDef

                        root.ids.potential.on_text_validate()

                        root.window.QSystem.setPotential(root.window.potential)

                        root.window.potential = copy
                        root.window.potentialDef = copyDef

                        root.window.tempState["psi"] = root.window.QSystem.psiMod
                        Factory.PlotPopup(root.window.tempState).open()

            FunctionInput:
                id: potential
                holder: root.window
                functionName: "potential"
                definitionName: "potentialDef"
                varDict: root.window.variablesDict
                jit: True

            GridLayout:
                size_hint_x: None
                width: 200
                rows: 3
                Label:
                    text: "Estat Inicial:"
                Button:
                    text: "Aplica canvi"
                    on_release:
                        root.ids.initState.on_text_validate()
                        root.window.QSystem.setState(root.window.initState)
                        root.window.animation.reset_plot()

                Button:
                    text: "Previsualitza"
                    on_release:
                        copy = root.window.initState
                        copyDef = root.window.initStateDef

                        root.ids.initState.on_text_validate()

                        root.window.QSystem.setTempState(root.window.initState)

                        root.window.initState = copy
                        root.window.initStateDef = copyDef

                        root.window.tempState["psi"] = root.window.QSystem.psiCopy
                        Factory.PlotPopup(root.window.tempState).open()

            FunctionInput:
                id: initState
                holder: root.window
                functionName: "initState"
                definitionName: "initStateDef"
                varDict: root.window.variablesDict

        GridLayout:
            cols:2
            GridLayout:
                cols: 2
                Button:
                    text: "Nou Sistema"
                    on_release:
                        root.window.newSystem()
                GridLayout:
                    rows: 2
                    Label:
                        text: "Nx:"
                    DataInput:
                        holder: root.window
                        attribute: "Nx"
                        condition: "range-4-10000"
                        id: Nx
                    Label:
                        text: "Ny:"
                    DataInput:
                        holder: root.window
                        attribute: "Ny"
                        condition: "range-4-10000"
                        confirm:
                        id: Ny
            GridLayout:
                rows: 2
                cols: 4
                Label:
                    text: "x0:"
                DataInput:
                    holder: root.window
                    attribute: "x0"
                    id: x0
                Label:
                    text: "xf:"
                DataInput:
                    holder: root.window
                    attribute: "xf"
                    id: xf
                Label:
                    text: "y0:"
                DataInput:
                    holder: root.window
                    attribute: "y0"
                    id: y0
                Label:
                    text: "yf:"
                DataInput:
                    holder: root.window
                    attribute: "yf"
                    id: yf
            ################## Change all at once

            GridLayout:
                rows: 1
                cols: 3
                Label:
                    text: "dtSimul:"
                DataInput:
                    #attribute: root.window.animation.dtSim
                    holder: root.window.animation
                    attribute: "dtSim"
                    id: dtSim
                ToggleButton:
                    text: "Imag timestep \n (* i)"
                    state: 'down' if root.window.animation.imagdt else 'normal'
                    on_press:
                        root.window.animation.imagdt = not root.window.animation.imagdt
            GridLayout:
                cols:4
                Label:
                    text: "steps/Frame\n(0 real time):"
                DataInput:
                    holder: root.window.animation
                    attribute: "stepsPerFrame"
                    condition: "nonnegative"
                    id: stepsPerFrame

                Label:
                    text: "t:"
                DataInput:
                    holder: root.window.animation.QSystem
                    attribute: "t"
                    id: t




<WindowManager>:
    MainScreen
    SandboxScreen
    ExamplesScreen
    GamesScreen
    PlayScreen

<MainScreen>:
    name: "main"
    BoxLayout:
        orientation: "vertical"
        BoxLayout:
            size_hint_y: 0.1
            Label:
                text: "[QUANTUM~MOVEMENT]"

        BoxLayout:
            size_hint_y: 0.8
            pos_hint: {"center_x": 0.5}

            orientation: "vertical"
            padding:20
            spacing:20
            Button:
                text: "Sandbox"
                on_release:
                    root.manager.transition.direction = "left"
                    app.root.current = "sandbox"
            Button:
                text: "Jocs"
                on_release:
                    root.manager.transition.direction = "left"
                    app.root.current = "games"
            Button:
                text: "Exemples"
                on_release:
                    root.manager.transition.direction = "left"
                    app.root.current = "examples"

        BoxLayout:
            size_hint_y: 0.1
            Label:
                text: "Joan Ainaud Fondevila"

<SandboxScreen>
    name: "sandbox"
    settingsButton: settingsButton
    FloatLayout:
        BoxLayout:
            orientation: "vertical"

            BoxLayout:
                id: plot
                size_hint: 1, 0.8
                padding:25
                #Label:
                #    text: "Hello"


            BoxLayout:
                orientation: "horizontal"
                size_hint: 1, 0.2
                cols: 1

                padding: 10
                spacing: 20
                Button:
                    #size_hint_y: None
                    id: settingsButton
                    text: "Paràmetres"
                    on_release:
                        root.stopPlaying()
                        Factory.ParametersPopup(root).open()
                        #print(root.dropdown.attach_to.text) #It is indeed linked?

                        #print(root.dropdown.ids)
                GridLayout:
                    rows:2
                    Button:
                        id: renorm
                        text: "Renormalitza"
                    ToggleButton:
                        id: showclassical
                        text: "Partícula clàssica"
                        state: 'down' if root.animation.drawClassical else 'normal'
                        on_press:
                            root.animation.reset_plot(drawClassical=not root.animation.drawClassical)

                GridLayout:
                    rows: 3
                    Button:
                        id: saveState
                        text :"Guarda Estat"
                        on_release:
                            root.saveState()
                    TextInput:
                        id: stateName
                        multiline: False
                        text: "estat0"
                    Button:
                        id: savedStates
                        text :"Estats Guardats"
                        on_release:
                            Factory.SavedStatesPopup(root).open()

                Button:
                    id: saveGif
                    text: "Guarda animació"
                    on_release:
                        root.stopPlaying()
                        Factory.SaveGifPopup(root).open()
                        #print(root.dropdown.attach_to.text) #It is indeed linked?

                        #print(root.dropdown.ids)
                Button:
                    id: pausePlay
                    text: "Play/Pause"
                    on_press:
                        root.startPlaying() if root.paused else root.stopPlaying()
                Button:
                    text: "Retorna al\nmenu d'inici"
                    on_release:
                        root.manager.transition.direction = "right"
                        root.stopPlaying()
                        app.root.current = "main"



        BoolCheckBox:
            active: True
            pos_hint: {'right': 0.975, 'y': 0.85}
            on_active: root.animation.reset_plot(showEnergy=self.active)
        BoolCheckBox:
            active: True
            pos_hint: {'right': 0.975, 'y': 0.60}
            on_active: root.animation.reset_plot(showNorm=self.active)
        BoolCheckBox:
            active: True
            pos_hint: {'right': 0.975, 'y': 0.35}
            on_active: root.animation.reset_plot(showMomentum=self.active)


<GamesScreen>:
    name: "games"
    BoxLayout:
        orientation: "vertical"
        padding: 20
        spacing: 20
        Label:
            size_hint: 1, 0.15
            text:"Jocs"
        GridLayout:
            id: gameSelect
            rows: 1
            spacing: 40

        BoxLayout:
            size_hint: 1, 0.15
            orientation: "horizontal"
            Button:
                text: "Return to main screen"
                on_release:
                    root.manager.transition.direction = "right"
                    app.root.current = "main"

<ExamplesScreen>:
    name: "examples"
    BoxLayout:
        orientation: "vertical"
        padding: 20
        spacing: 20
        Label:
            size_hint: 1, 0.15
            text:"Exemples"
        GridLayout:
            id: exampselect
            rows: 2
            spacing: 40

        BoxLayout:
            size_hint: 1, 0.15
            orientation: "horizontal"
            Button:
                text: "Return to main screen"
                on_release:
                    root.manager.transition.direction = "right"
                    app.root.current = "main"


<PlayScreen>:
    name: "playscreen"

